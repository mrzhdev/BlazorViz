@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager
@using Microsoft.JSInterop
@using DummyClassLibrary

<div>
    <strong>@Title</strong>

    <p class="title">Visualization  for C#, Blazor interop wrapper for Viz.js </p>
    <p class="para">Viz.js, Emscripten version of Graphviz: <a href="https://github.com/mdaines/viz.js" target="_blank">https://github.com/mdaines/viz.js</a></p>
    <p class="para">svg-pan-zoom.js, pan/zoom for HTML SVG: <a href="https://github.com/ariutta/svg-pan-zoom" target="_blank">https://github.com/ariutta/svg-pan-zoom</a></p>
    <p class="para">Demo is visualization of C# Syntax, used Roslyn CSharpSyntaxWalker to generate Graphviz DOT language file </p>
    <p class="title">Expression to process: </p>
    <div class="input">
        <textarea id="inputBox" maxlength="2000" spellcheck="false" @bind="expression" />
        <button id="submitButton" @onclick="Render">
            Render
        </button>
    </div>
    

    <div id="graph">
        <div id="output">
            <div id="error"></div>
          </div>
    </div>

</div>

@code {

    // Demonstrates how a parent component can supply parameters
    [Parameter]
    public string? Title { get; set; }

    private string expression;

    private Processing processing = new Processing();

    protected override async void OnInitialized()
    {
        expression = "a = x + y * 5 / 4* (56 + 1);";
    }


    private async void Render()
    {
        processing.Parse(expression);

        if(processing.HasErrors())
        {
            await AppendError(processing.Errors);
        }
        else
        {
            await VizRender(processing.GraphvizText);
        }
    }

    public async Task VizRender(string ast) 
    {
        await JSRuntime.InvokeAsync<string>("vizRender",ast);     
    }

    public async Task AppendError(string errorMessage) 
    {
        await JSRuntime.InvokeAsync<string>("appendError", errorMessage);     
    }
}
